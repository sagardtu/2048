{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sagar\\\\OneDrive\\\\Desktop\\\\2048\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SIZE = 4;\n\n// Generate empty 4x4 grid\nconst generateEmptyGrid = () => {\n  return Array(SIZE).fill().map(() => Array(SIZE).fill(0));\n};\n\n// Add a new 2 or 4 in an empty cell\nconst addRandomTile = grid => {\n  const emptyCells = [];\n  for (let r = 0; r < SIZE; r++) {\n    for (let c = 0; c < SIZE; c++) {\n      if (grid[r][c] === 0) emptyCells.push([r, c]);\n    }\n  }\n  if (emptyCells.length === 0) return grid;\n  const [r, c] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n  grid[r][c] = Math.random() < 0.9 ? 2 : 4;\n  return grid;\n};\n\n// Game over check\nconst isGameOver = grid => {\n  for (let r = 0; r < SIZE; r++) {\n    for (let c = 0; c < SIZE; c++) {\n      if (grid[r][c] === 0) return false;\n      if (c < SIZE - 1 && grid[r][c] === grid[r][c + 1]) return false;\n      if (r < SIZE - 1 && grid[r][c] === grid[r + 1][c]) return false;\n    }\n  }\n  return true;\n};\nconst transpose = grid => grid[0].map((_, c) => grid.map(row => row[c]));\nconst reverse = grid => grid.map(row => [...row].reverse());\n\n// Handle merging logic with score\nconst operateRow = row => {\n  let scoreGained = 0;\n  let newRow = row.filter(val => val !== 0);\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      scoreGained += newRow[i];\n      newRow[i + 1] = 0;\n    }\n  }\n  newRow = newRow.filter(val => val !== 0);\n  while (newRow.length < SIZE) newRow.push(0);\n  return {\n    row: newRow,\n    scoreGained\n  };\n};\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState(() => addRandomTile(addRandomTile(generateEmptyGrid())));\n  const [score, setScore] = useState(0);\n  const restartGame = () => {\n    setGrid(addRandomTile(addRandomTile(generateEmptyGrid())));\n    setScore(0);\n  };\n  const handleMove = direction => {\n    let moved = false;\n    let newScore = 0;\n    const applyOperation = g => {\n      return g.map(row => {\n        const {\n          row: newRow,\n          scoreGained\n        } = operateRow(row);\n        newScore += scoreGained;\n        return newRow;\n      });\n    };\n    let newGrid = [...grid];\n    if (direction === \"ArrowLeft\") {\n      newGrid = applyOperation(newGrid);\n    } else if (direction === \"ArrowRight\") {\n      newGrid = reverse(applyOperation(reverse(newGrid)));\n    } else if (direction === \"ArrowUp\") {\n      newGrid = transpose(applyOperation(transpose(newGrid)));\n    } else if (direction === \"ArrowDown\") {\n      newGrid = transpose(reverse(applyOperation(reverse(transpose(newGrid)))));\n    }\n    if (JSON.stringify(newGrid) !== JSON.stringify(grid)) {\n      moved = true;\n    }\n    if (moved) {\n      const updatedGrid = addRandomTile(newGrid);\n      setGrid(updatedGrid);\n      setScore(prev => prev + newScore);\n      if (isGameOver(updatedGrid)) {\n        setTimeout(() => {\n          alert(\"Game Over! Click Restart to play again.\");\n        }, 100);\n      }\n    }\n  };\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key)) {\n        e.preventDefault();\n        handleMove(e.key);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [grid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"2048 Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell\",\n          children: cell !== 0 ? cell : \"\"\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"restart-btn\",\n      onClick: restartGame,\n      children: \"\\uD83D\\uDD04 Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"DHVM4zjdl4BmQ5gAn4qLmvtsJJQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","SIZE","generateEmptyGrid","Array","fill","map","addRandomTile","grid","emptyCells","r","c","push","length","Math","floor","random","isGameOver","transpose","_","row","reverse","operateRow","scoreGained","newRow","filter","val","i","App","_s","setGrid","score","setScore","restartGame","handleMove","direction","moved","newScore","applyOperation","g","newGrid","JSON","stringify","updatedGrid","prev","setTimeout","alert","handleKeyDown","e","includes","key","preventDefault","window","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","cell","j","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sagar/OneDrive/Desktop/2048/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nconst SIZE = 4;\n\n// Generate empty 4x4 grid\nconst generateEmptyGrid = () => {\n  return Array(SIZE)\n    .fill()\n    .map(() => Array(SIZE).fill(0));\n};\n\n// Add a new 2 or 4 in an empty cell\nconst addRandomTile = (grid) => {\n  const emptyCells = [];\n  for (let r = 0; r < SIZE; r++) {\n    for (let c = 0; c < SIZE; c++) {\n      if (grid[r][c] === 0) emptyCells.push([r, c]);\n    }\n  }\n  if (emptyCells.length === 0) return grid;\n  const [r, c] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n  grid[r][c] = Math.random() < 0.9 ? 2 : 4;\n  return grid;\n};\n\n// Game over check\nconst isGameOver = (grid) => {\n  for (let r = 0; r < SIZE; r++) {\n    for (let c = 0; c < SIZE; c++) {\n      if (grid[r][c] === 0) return false;\n      if (c < SIZE - 1 && grid[r][c] === grid[r][c + 1]) return false;\n      if (r < SIZE - 1 && grid[r][c] === grid[r + 1][c]) return false;\n    }\n  }\n  return true;\n};\n\nconst transpose = (grid) => grid[0].map((_, c) => grid.map((row) => row[c]));\nconst reverse = (grid) => grid.map((row) => [...row].reverse());\n\n// Handle merging logic with score\nconst operateRow = (row) => {\n  let scoreGained = 0;\n  let newRow = row.filter((val) => val !== 0);\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      scoreGained += newRow[i];\n      newRow[i + 1] = 0;\n    }\n  }\n  newRow = newRow.filter((val) => val !== 0);\n  while (newRow.length < SIZE) newRow.push(0);\n  return { row: newRow, scoreGained };\n};\n\nconst App = () => {\n  const [grid, setGrid] = useState(() =>\n    addRandomTile(addRandomTile(generateEmptyGrid()))\n  );\n  const [score, setScore] = useState(0);\n\n  const restartGame = () => {\n    setGrid(addRandomTile(addRandomTile(generateEmptyGrid())));\n    setScore(0);\n  };\n\n  const handleMove = (direction) => {\n    let moved = false;\n    let newScore = 0;\n\n    const applyOperation = (g) => {\n      return g.map((row) => {\n        const { row: newRow, scoreGained } = operateRow(row);\n        newScore += scoreGained;\n        return newRow;\n      });\n    };\n\n    let newGrid = [...grid];\n\n    if (direction === \"ArrowLeft\") {\n      newGrid = applyOperation(newGrid);\n    } else if (direction === \"ArrowRight\") {\n      newGrid = reverse(applyOperation(reverse(newGrid)));\n    } else if (direction === \"ArrowUp\") {\n      newGrid = transpose(applyOperation(transpose(newGrid)));\n    } else if (direction === \"ArrowDown\") {\n      newGrid = transpose(reverse(applyOperation(reverse(transpose(newGrid)))));\n    }\n\n    if (JSON.stringify(newGrid) !== JSON.stringify(grid)) {\n      moved = true;\n    }\n\n    if (moved) {\n      const updatedGrid = addRandomTile(newGrid);\n      setGrid(updatedGrid);\n      setScore((prev) => prev + newScore);\n\n      if (isGameOver(updatedGrid)) {\n        setTimeout(() => {\n          alert(\"Game Over! Click Restart to play again.\");\n        }, 100);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key)) {\n        e.preventDefault();\n        handleMove(e.key);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [grid]);\n\n  return (\n    <div className=\"App\">\n      <h1>2048 Game</h1>\n\n      <div className=\"grid\">\n        {grid.map((row, i) => (\n          <div className=\"row\" key={i}>\n            {row.map((cell, j) => (\n              <div className=\"cell\" key={j}>\n                {cell !== 0 ? cell : \"\"}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <h2>Score: {score}</h2>\n      <button className=\"restart-btn\" onClick={restartGame}>\n        🔄 Restart\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}